/*
 * Copyright (C) 2024 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */

// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	metric "go.opentelemetry.io/otel/sdk/metric"
)

// MeterProvider is an autogenerated mock type for the MeterProvider type
type MeterProvider struct {
	mock.Mock
}

// InitMeterProvider provides a mock function with given fields: ctx
func (_m *MeterProvider) InitMeterProvider(ctx context.Context) (*metric.MeterProvider, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for InitMeterProvider")
	}

	var r0 *metric.MeterProvider
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*metric.MeterProvider, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *metric.MeterProvider); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*metric.MeterProvider)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMeterProvider creates a new instance of MeterProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMeterProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MeterProvider {
	mock := &MeterProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
