// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	spanner "cloud.google.com/go/spanner"
)

// SpannerClientInterface is an autogenerated mock type for the SpannerClientInterface type
type SpannerClientInterface struct {
	mock.Mock
}

// GetClient provides a mock function with given fields: ctx
func (_m *SpannerClientInterface) GetClient(ctx context.Context) (*spanner.Client, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetClient")
	}

	var r0 *spanner.Client
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*spanner.Client, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *spanner.Client); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*spanner.Client)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSpannerClientInterface creates a new instance of SpannerClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSpannerClientInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *SpannerClientInterface {
	mock := &SpannerClientInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
